# Importa a biblioteca OpenCV para processamento de imagens
import cv2
# Importa a biblioteca NumPy para manipulação de arrays
import numpy as np
# Importa a biblioteca serial para comunicação serial com o Arduino
import serial
# Importa a biblioteca time para lidar com temporização
import time

# Inicialização da comunicação serial com o Arduino na porta COM3 com taxa de transmissão de 9600 bps
arduino = serial.Serial('COM3', 9600)  # Substitua 'COM3' pela porta serial do seu Arduino
# Espera 2 segundos pra garantir que a conexão com o Arduino foi estabelecida
time.sleep(2)

# Define uma função pra detectar objetos de cores específicas em um quadro de imagem
def detect_color(frame):
    # Converte o espaço de cores do quadro da imagem de BGR para HSV
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # Define os intervalos de cor para azul, vermelho e verde no espaço de cores HSV
    lower_blue = np.array([90, 50, 50])
    upper_blue = np.array([130, 255, 255])
    lower_red = np.array([0, 50, 50])
    upper_red = np.array([10, 255, 255])
    lower_green = np.array([50, 100, 100])
    upper_green = np.array([70, 255, 255])

    # Cria máscaras para cada cor com base nos intervalos definidos
    mask_blue = cv2.inRange(hsv, lower_blue, upper_blue)
    mask_red = cv2.inRange(hsv, lower_red, upper_red)
    mask_green = cv2.inRange(hsv, lower_green, upper_green)

    # Inicializa uma lista para armazenar os objetos detectados
    color_objects = []

    # Itera sobre cada máscara e sua respectiva cor
    for contours, color in zip([mask_blue, mask_red, mask_green], ['Blue', 'Red', 'Green']):
        # Encontra os contornos na máscara
        contours, _ = cv2.findContours(contours, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        # Itera sobre cada contorno encontrado
        for cnt in contours:
            # Calcula a área do contorno
            area = cv2.contourArea(cnt)
            # Verifica se a área do contorno é maior que 500 pixels (ajuste necessário)
            if area > 500:
                # Obtém as coordenadas do retângulo delimitador do contorno
                x, y, w, h = cv2.boundingRect(cnt)
                # Desenha um retângulo ao redor do objeto detectado
                cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
                # Adiciona o texto com a cor e as coordenadas do objeto ao quadro
                cv2.putText(frame, f'{color} ({x}, {y})', (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
                # Adiciona a cor e as coordenadas do objeto à lista de objetos detectados
                color_objects.append((color, (x, y, w, h)))
                # Envia as coordenadas do objeto para o Arduino
                arduino.write(f"{color} ({x}, {y})\n".encode())

    # Retorna o quadro de imagem modificado e a lista de objetos detectados
    return frame, color_objects

# Define uma função para detectar objetos brancos em um quadro de imagem
def detect_white(frame, color_objects):
    # Converte o espaço de cores do quadro da imagem de BGR para HSV
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # Define os intervalos de cor para branco no espaço de cores HSV
    lower_white = np.array([0, 0, 200])
    upper_white = np.array([180, 30, 255])

    # Cria uma máscara para a cor branca com base nos intervalos definidos
    mask_white = cv2.inRange(hsv, lower_white, upper_white)

    # Encontra os contornos na máscara da cor branca
    contours_white, _ = cv2.findContours(mask_white, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Inicializa um contador para a base branca
    white_count = 1

    # Itera sobre cada contorno branco encontrado
    for cnt in contours_white:
        # Calcula a área do contorno
        area = cv2.contourArea(cnt)
        # Verifica se a área do contorno é maior que 500 pixels (ajuste necessário)
        if area > 500:
            # Obtém as coordenadas do retângulo delimitador do contorno
            x, y, w, h = cv2.boundingRect(cnt)
            # Desenha um retângulo ao redor do objeto detectado
            cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 255, 255), 2)
            # Adiciona o texto com a cor e as coordenadas do objeto branco ao quadro
            cv2.putText(frame, f'White {white_count} ({x}, {y})', (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5,
                        (255, 255, 255), 2)
            # Incrementa o contador de bases brancas
            white_count += 1
            # Itera sobre a lista de objetos de cor detectados
            for color, (cx, cy, cw, ch) in color_objects:
                # Verifica se o objeto de cor está dentro do retângulo delimitador do objeto branco
                if x < cx + cw and x + w > cx and y < cy + ch and y + h > cy:
                    # Adiciona texto indicando a cor do objeto sobre a base branca
                    cv2.putText(frame, f'{color} on White {white_count - 1} ({x}, {y})', (x, y - 30), cv2.FONT_HERSHEY_SIMPLEX, 0.5,
                                (255, 255, 255), 2)

    # Retorna o quadro de imagem modificado
    return frame

# Inicializa a captura de vídeo a partir da câmera padrão (índice 0)
cap = cv2.VideoCapture(0)

# Loop principal para capturar e processar os quadros de vídeo
while True:
    # Captura um quadro de vídeo
    ret, frame = cap.read()

    # Verifica se o quadro foi capturado corretamente
    if not ret:
        break

    # Espelha horizontalmente o quadro de vídeo
    frame = cv2.flip(frame, 1)

    # Detecta objetos coloridos no quadro de vídeo e obtém a lista de objetos detectados
    frame, color_objects = detect_color(frame)
    # Detecta objetos brancos no quadro de vídeo com base na lista de objetos coloridos detectados
    frame = detect_white(frame, color_objects)

    # Exibe o quadro de vídeo com a detecção de cores
    cv2.imshow('Color Detection', frame)

    # Verifica se a tecla 'q' foi pressionada para sair do loop
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Libera os recursos da câmera e fecha todas as janelas abertas
cap.release()
cv2.destroyAllWindows()
# Fecha a conexão serial com o Arduino
arduino.close()
